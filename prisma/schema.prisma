
generator client  {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "mysql"
  // url      = env("DATABASE_URL")
  url      = "mysql://mfundo:bm19962019@localhost:3306/mfundo?schema=public"
}
model User {
  id                String         @id @default(cuid())
  email              String         @unique
  username           String         @unique
  name               String?
  title              String?      
  surname            String?
  phone              String?        @unique
  age                Int?
  gender             Gender     
  profile            profile_type @default(ADMIN)
  password           String
  salt               String
  current_logged_in_at   DateTime
  last_logged_in_at      DateTime
  account_status      status @default(INACTIVE)
  created_at          DateTime       @default(now())
  updated_at          DateTime @updatedAt

  @@map("user")

}
enum profile_type {
  ADMIN
  STUDENT
}
 
 enum status {
  ACTIVE
  INACTIVE
 }

 enum Gender {
  MALE
  FEMALE
 }
 
 
model Student {
  id                     String              @unique  @id @default(cuid())
  portal_id              Int @unique  @default(autoincrement())
  first_name             String?
  last_name              String?
  email                  String? @unique           
  phone                  String?
  nationality            Json?            
  date_of_birth          DateTime?
  school                 String?
  grade                  String?
  profile                profile_type @default(STUDENT)
  password               String?
  answers                 QuestionAnswers[]
  times Time[]
  current_logged_in_at   DateTime?
  last_logged_in_at      DateTime?
}


enum exam_status {
  NOT_TAKEN
  PASS
  FAILED
}

model Subject {
  id                  String                @id @unique @default(cuid())
  name              String?
  description         String?                @db.VarChar(10000)
  status              Subject_status    @default(OPEN)
  exam Exam[]
}


enum Subject_status {
  OPEN
  CLOSED
  DRAFT
}
model Exam {
  id String @id @default(cuid())
  exam_name String
  subject_id String
  exam_hours Int  @default(0)
  exam_minutes Int @default(59)
  subject  Subject @relation(fields: [subject_id],references: [id])
  questions Questions[]
  solutions QuestionAnswers[]
  student_time Time[]
  created_at          DateTime       @default(now())
  updated_at          DateTime @updatedAt
  
}
model Questions {
  id                          String      @id @default(cuid())
  question_type               String
  options                     Json?     
  score                       Int?
  created_at                  DateTime    @default(now())
  created_by_name             String?
  created_by_id               Int?
  boolean_answer              Boolean?
  multichoice_answer          String? 
  question                    String      @db.VarChar(10000)
  student_boolean_answer      Boolean?
  student_multichoice_answer  String?
  student_unstructured_answer String?
  answers QuestionAnswers[]
  exam_id String
  exam Exam     @relation(fields: [exam_id],references: [id])
  correct                     Boolean?    @default(false)

}

model QuestionAnswers {
  id                          String @id @default(cuid())
  question                    String      @db.VarChar(10000)
  question_id String
  questions Questions @relation(fields: [question_id],references: [id])
  question_type               String
  multichoice_answer          String?
  boolean_answer              Boolean?
  options                     Json?     
  score                       Int?
  student_boolean_answer      Boolean?
  student_multichoice_answer  String?
  student_id String
  student Student @relation(fields: [student_id],references: [id])
  student_unstructured_answer String?
  exam_id String
  exam Exam     @relation(fields: [exam_id],references: [id])
  correct                     Boolean?    @default(false)
  created_at                  DateTime    @default(now())
  created_by_name             String?
  created_by_id               Int?
 
  
}

model Time {
  id String @id @default(cuid())
  student_id String
  student Student @relation(fields: [student_id],references: [id])
  exam_id String
  exam Exam     @relation(fields: [exam_id],references: [id])
  hours Int
  minutes Int
  seconds Int
  updated_at DateTime @updatedAt
}



 model Attachments {
  id  String @id @default(cuid())
  attachment_name String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

 }


